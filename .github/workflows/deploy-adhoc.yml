name: Deploy Services (Ad-hoc)

on:
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to deploy (comma-separated: bff,catalog,client,delivery,inventory,order,seller or "all")'
        required: true
        default: 'all'
        type: string

env:
  AWS_REGION: us-east-1

jobs:
  determine-services:
    runs-on: ubuntu-latest
    outputs:
      deploy-bff: ${{ steps.determine.outputs.deploy-bff }}
      deploy-catalog: ${{ steps.determine.outputs.deploy-catalog }}
      deploy-client: ${{ steps.determine.outputs.deploy-client }}
      deploy-delivery: ${{ steps.determine.outputs.deploy-delivery }}
      deploy-inventory: ${{ steps.determine.outputs.deploy-inventory }}
      deploy-order: ${{ steps.determine.outputs.deploy-order }}
      deploy-seller: ${{ steps.determine.outputs.deploy-seller }}
    steps:
      - name: Determine which services to deploy
        id: determine
        run: |
          SERVICES="${{ github.event.inputs.services }}"

          if [ "$SERVICES" == "all" ]; then
            echo "deploy-bff=true" >> $GITHUB_OUTPUT
            echo "deploy-catalog=true" >> $GITHUB_OUTPUT
            echo "deploy-client=true" >> $GITHUB_OUTPUT
            echo "deploy-delivery=true" >> $GITHUB_OUTPUT
            echo "deploy-inventory=true" >> $GITHUB_OUTPUT
            echo "deploy-order=true" >> $GITHUB_OUTPUT
            echo "deploy-seller=true" >> $GITHUB_OUTPUT
          else
            echo "deploy-bff=false" >> $GITHUB_OUTPUT
            echo "deploy-catalog=false" >> $GITHUB_OUTPUT
            echo "deploy-client=false" >> $GITHUB_OUTPUT
            echo "deploy-delivery=false" >> $GITHUB_OUTPUT
            echo "deploy-inventory=false" >> $GITHUB_OUTPUT
            echo "deploy-order=false" >> $GITHUB_OUTPUT
            echo "deploy-seller=false" >> $GITHUB_OUTPUT

            IFS=',' read -ra SERVICE_ARRAY <<< "$SERVICES"
            for service in "${SERVICE_ARRAY[@]}"; do
              service=$(echo "$service" | xargs)  # trim whitespace
              echo "deploy-$service=true" >> $GITHUB_OUTPUT
            done
          fi

  deploy-bff:
    needs: determine-services
    if: needs.determine-services.outputs.deploy-bff == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy BFF Service to ECS
        env:
          ECS_CLUSTER: medisupply-cluster
          ECS_SERVICE: medisupply-bff-service
        run: |
          echo "üöÄ Deploying BFF service..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "‚è≥ Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region ${{ env.AWS_REGION }}

          echo "‚úÖ BFF service deployed successfully"

  deploy-catalog:
    needs: determine-services
    if: needs.determine-services.outputs.deploy-catalog == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Catalog Service to ECS
        env:
          ECS_CLUSTER: medisupply-cluster
          ECS_SERVICE: medisupply-catalog-service
        run: |
          echo "üöÄ Deploying Catalog service..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "‚è≥ Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region ${{ env.AWS_REGION }}

          echo "‚úÖ Catalog service deployed successfully"

  deploy-client:
    needs: determine-services
    if: needs.determine-services.outputs.deploy-client == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Client Service to ECS
        env:
          ECS_CLUSTER: medisupply-cluster
          ECS_SERVICE: medisupply-client-service
        run: |
          echo "üöÄ Deploying Client service..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "‚è≥ Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region ${{ env.AWS_REGION }}

          echo "‚úÖ Client service deployed successfully"

  deploy-delivery:
    needs: determine-services
    if: needs.determine-services.outputs.deploy-delivery == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Delivery Service to ECS
        env:
          ECS_CLUSTER: medisupply-cluster
          ECS_SERVICE: medisupply-delivery-service
        run: |
          echo "üöÄ Deploying Delivery service..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "‚è≥ Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region ${{ env.AWS_REGION }}

          echo "‚úÖ Delivery service deployed successfully"

  deploy-inventory:
    needs: determine-services
    if: needs.determine-services.outputs.deploy-inventory == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Inventory Service to ECS
        env:
          ECS_CLUSTER: medisupply-cluster
          ECS_SERVICE: medisupply-inventory-service
        run: |
          echo "üöÄ Deploying Inventory service..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "‚è≥ Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region ${{ env.AWS_REGION }}

          echo "‚úÖ Inventory service deployed successfully"

  deploy-order:
    needs: determine-services
    if: needs.determine-services.outputs.deploy-order == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Order Service to ECS
        env:
          ECS_CLUSTER: medisupply-cluster
          ECS_SERVICE: medisupply-order-service
        run: |
          echo "üöÄ Deploying Order service..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "‚è≥ Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region ${{ env.AWS_REGION }}

          echo "‚úÖ Order service deployed successfully"

  deploy-seller:
    needs: determine-services
    if: needs.determine-services.outputs.deploy-seller == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Seller Service to ECS
        env:
          ECS_CLUSTER: medisupply-cluster
          ECS_SERVICE: medisupply-seller-service
        run: |
          echo "üöÄ Deploying Seller service..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "‚è≥ Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region ${{ env.AWS_REGION }}

          echo "‚úÖ Seller service deployed successfully"
