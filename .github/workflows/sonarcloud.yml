name: SonarCloud Analysis

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Install dependencies and run tests for each microservice
      - name: Test BFF
        run: |
          cd bff
          poetry install --no-interaction --no-ansi
          poetry run pytest --cov=web --cov=common --cov=config --cov-report=xml:coverage.xml --cov-report=term
          # Fix paths in coverage.xml for SonarCloud (prepend bff/)
          sed -i 's|<source>.*</source>|<source>/home/runner/work/proyecto-2-backend/proyecto-2-backend/bff</source>|g' coverage.xml
          sed -i 's|filename="|filename="bff/|g' coverage.xml
        continue-on-error: false

      - name: Test Catalog
        run: |
          cd catalog
          poetry install --no-interaction --no-ansi
          poetry run pytest --cov=src --cov-report=xml:coverage.xml --cov-report=term
          # Fix paths in coverage.xml for SonarCloud (prepend catalog/)
          sed -i 's|<source>.*</source>|<source>/home/runner/work/proyecto-2-backend/proyecto-2-backend/catalog</source>|g' coverage.xml
          sed -i 's|filename="|filename="catalog/|g' coverage.xml
        continue-on-error: false

      - name: Test Client
        run: |
          cd client
          poetry install --no-interaction --no-ansi
          poetry run pytest --cov=src --cov-report=xml:coverage.xml --cov-report=term || true
          # Fix paths in coverage.xml for SonarCloud (prepend client/)
          if [ -f coverage.xml ]; then
            sed -i 's|<source>.*</source>|<source>/home/runner/work/proyecto-2-backend/proyecto-2-backend/client</source>|g' coverage.xml
            sed -i 's|filename="|filename="client/|g' coverage.xml
          fi
        continue-on-error: true

      - name: Test Delivery
        run: |
          cd delivery
          poetry install --no-interaction --no-ansi
          poetry run pytest --cov=src --cov-report=xml:coverage.xml --cov-report=term || true
          # Fix paths in coverage.xml for SonarCloud (prepend delivery/)
          if [ -f coverage.xml ]; then
            sed -i 's|<source>.*</source>|<source>/home/runner/work/proyecto-2-backend/proyecto-2-backend/delivery</source>|g' coverage.xml
            sed -i 's|filename="|filename="delivery/|g' coverage.xml
          fi
        continue-on-error: true

      - name: Test Inventory
        run: |
          cd inventory
          poetry install --no-interaction --no-ansi
          poetry run pytest --cov=src --cov-report=xml:coverage.xml --cov-report=term
          # Fix paths in coverage.xml for SonarCloud (prepend inventory/)
          sed -i 's|<source>.*</source>|<source>/home/runner/work/proyecto-2-backend/proyecto-2-backend/inventory</source>|g' coverage.xml
          sed -i 's|filename="|filename="inventory/|g' coverage.xml
        continue-on-error: false

      - name: Test Order
        run: |
          cd order
          poetry install --no-interaction --no-ansi
          poetry run pytest --cov=src --cov-report=xml:coverage.xml --cov-report=term
          # Fix paths in coverage.xml for SonarCloud (prepend order/)
          sed -i 's|<source>.*</source>|<source>/home/runner/work/proyecto-2-backend/proyecto-2-backend/order</source>|g' coverage.xml
          sed -i 's|filename="|filename="order/|g' coverage.xml
        continue-on-error: false

      - name: Test Seller
        run: |
          cd seller
          poetry install --no-interaction --no-ansi
          poetry run pytest --cov=src --cov-report=xml:coverage.xml --cov-report=term
          # Fix paths in coverage.xml for SonarCloud (prepend seller/)
          sed -i 's|<source>.*</source>|<source>/home/runner/work/proyecto-2-backend/proyecto-2-backend/seller</source>|g' coverage.xml
          sed -i 's|filename="|filename="seller/|g' coverage.xml
        continue-on-error: false

      # Verify coverage files were generated
      - name: List coverage files
        run: |
          echo "=== Generated coverage files ==="
          find . -name "coverage.xml" -type f -exec echo {} \; -exec head -5 {} \;

      # Verify all expected coverage files exist before SonarCloud scan
      - name: Check coverage files exist
        run: |
          echo "=== Checking required coverage files ==="
          EXIT_CODE=0

          for service in bff catalog inventory order seller; do
            if [ -f "${service}/coverage.xml" ]; then
              echo "✓ ${service}/coverage.xml exists"
              ls -lh "${service}/coverage.xml"
            else
              echo "✗ ${service}/coverage.xml NOT FOUND"
              EXIT_CODE=1
            fi
          done

          # Optional services (client, delivery)
          for service in client delivery; do
            if [ -f "${service}/coverage.xml" ]; then
              echo "✓ ${service}/coverage.xml exists (optional)"
              ls -lh "${service}/coverage.xml"
            else
              echo "ℹ ${service}/coverage.xml not found (optional)"
            fi
          done

          if [ $EXIT_CODE -eq 0 ]; then
            echo ""
            echo "✓ All required coverage files found!"
          else
            echo ""
            echo "✗ Some required coverage files are missing!"
            exit 1
          fi

      # Check if SonarCloud is configured
      - name: Check SonarCloud Configuration
        id: sonar_check
        run: |
          if [ -z "${{ secrets.SONAR_TOKEN }}" ] || [ -z "${{ secrets.SONAR_ORGANIZATION }}" ]; then
            echo "configured=false" >> $GITHUB_OUTPUT
            echo "⚠️ SonarCloud not configured - skipping analysis"
            echo "ℹ️ To enable: Add SONAR_TOKEN and SONAR_ORGANIZATION secrets"
          else
            echo "configured=true" >> $GITHUB_OUTPUT
            echo "✅ SonarCloud configured - running analysis"
          fi

      # SonarCloud Scan (only if configured)
      - name: SonarCloud Scan
        if: steps.sonar_check.outputs.configured == 'true'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.verbose=true

      # Quality Gate check (only if configured)
      - name: SonarCloud Quality Gate check
        if: steps.sonar_check.outputs.configured == 'true'
        uses: SonarSource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      # Show message if SonarCloud is not configured
      - name: SonarCloud Not Configured
        if: steps.sonar_check.outputs.configured == 'false'
        run: |
          echo "ℹ️ SonarCloud analysis was skipped"
          echo ""
          echo "To enable SonarCloud:"
          echo "1. Create account at https://sonarcloud.io"
          echo "2. Import this repository"
          echo "3. Add GitHub secrets:"
          echo "   - SONAR_TOKEN"
          echo "   - SONAR_ORGANIZATION"
          echo ""
          echo "See SONARCLOUD_SETUP.md for detailed instructions"
