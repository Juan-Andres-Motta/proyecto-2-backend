name: Build Services (Ad-hoc)

on:
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to build (comma-separated: bff,catalog,client,delivery,inventory,order,seller or "all")'
        required: true
        default: 'all'
        type: string

env:
  AWS_REGION: us-east-1

jobs:
  determine-services:
    runs-on: ubuntu-latest
    outputs:
      build-bff: ${{ steps.determine.outputs.build-bff }}
      build-catalog: ${{ steps.determine.outputs.build-catalog }}
      build-client: ${{ steps.determine.outputs.build-client }}
      build-delivery: ${{ steps.determine.outputs.build-delivery }}
      build-inventory: ${{ steps.determine.outputs.build-inventory }}
      build-order: ${{ steps.determine.outputs.build-order }}
      build-seller: ${{ steps.determine.outputs.build-seller }}
    steps:
      - name: Determine which services to build
        id: determine
        run: |
          SERVICES="${{ github.event.inputs.services }}"

          if [ "$SERVICES" == "all" ]; then
            echo "build-bff=true" >> $GITHUB_OUTPUT
            echo "build-catalog=true" >> $GITHUB_OUTPUT
            echo "build-client=true" >> $GITHUB_OUTPUT
            echo "build-delivery=true" >> $GITHUB_OUTPUT
            echo "build-inventory=true" >> $GITHUB_OUTPUT
            echo "build-order=true" >> $GITHUB_OUTPUT
            echo "build-seller=true" >> $GITHUB_OUTPUT
          else
            echo "build-bff=false" >> $GITHUB_OUTPUT
            echo "build-catalog=false" >> $GITHUB_OUTPUT
            echo "build-client=false" >> $GITHUB_OUTPUT
            echo "build-delivery=false" >> $GITHUB_OUTPUT
            echo "build-inventory=false" >> $GITHUB_OUTPUT
            echo "build-order=false" >> $GITHUB_OUTPUT
            echo "build-seller=false" >> $GITHUB_OUTPUT

            IFS=',' read -ra SERVICE_ARRAY <<< "$SERVICES"
            for service in "${SERVICE_ARRAY[@]}"; do
              service=$(echo "$service" | xargs)  # trim whitespace
              echo "build-$service=true" >> $GITHUB_OUTPUT
            done
          fi

  build-bff:
    needs: determine-services
    if: needs.determine-services.outputs.build-bff == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bff
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./bff
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-catalog:
    needs: determine-services
    if: needs.determine-services.outputs.build-catalog == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: catalog
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./catalog
        run: |
          docker build --target app -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-client:
    needs: determine-services
    if: needs.determine-services.outputs.build-client == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: client
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./client
        run: |
          docker build --target app -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-delivery:
    needs: determine-services
    if: needs.determine-services.outputs.build-delivery == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: delivery
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./delivery
        run: |
          docker build --target app -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-inventory:
    needs: determine-services
    if: needs.determine-services.outputs.build-inventory == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: inventory
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./inventory
        run: |
          docker build --target app -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-order:
    needs: determine-services
    if: needs.determine-services.outputs.build-order == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: order
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./order
        run: |
          docker build --target app -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-seller:
    needs: determine-services
    if: needs.determine-services.outputs.build-seller == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: seller
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./seller
        run: |
          docker build --target app -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
